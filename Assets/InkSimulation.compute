#pragma kernel InitializeKernel
#pragma kernel ApplyInkKernel
#pragma kernel CalculateInkTransferKernel
#pragma kernel ResolveInkKernel

RWTexture2D<float4> inkGrid; //r = inkLevel; g = inkSaturationLevel; b = incomingInk, a = dryness;
RWTexture2D<float4> visualGrid;
Texture2D<float4> heightMapRef;
float2 gridSize;
float inkTransferSpeed;
float deltaTime;
float maxInkPerCell;
float inkDrop;
bool holdingMouse;
float drySpeed;
float wetnessTransfer;

struct Brush
{
	int2 pos;
	int2 prevPos;
	float radius;
};
StructuredBuffer<Brush> brushBuffer;

float inkLevel(float4 ink)
{
	return ink.r;
}

float inkSaturationLevel(float4 ink)
{
	return ink.g;
}

float incomingInk(float4 ink)
{
	return ink.b;
}

float dryness(float4 ink)
{
	return ink.a;
}

void setInkLevel(inout float4 ink, float inkLevel)
{
	ink.r = inkLevel;
}

void setInkSaturationLevel(inout float4 ink, float inkSaturationLevel)
{
	ink.g = inkSaturationLevel;
}

void setIncomingInk(inout float4 ink, float incomingInk)
{
	ink.b = incomingInk;
}

void setDryness(inout float4 ink, float dryness)
{
	ink.a = dryness;
}

float OverflowAmount(float4 ink)
{
	//Dry ink doesnt flow
	float wetness = saturate(1 - dryness(ink));
	return max(inkLevel(ink) - inkSaturationLevel(ink), 0) * wetness;
}

float OverflowAmountQuarter(float4 ink)
{
	return OverflowAmount(ink) / 4;
}

float InkRatio(float4 ink)
{
	return saturate(inkLevel(ink) / inkSaturationLevel(ink));
}

float MoveTowards(float current, float target, float maxDelta)
{
	if (abs(target - current) <= maxDelta)
	{
		return target;
	}

	return current + sign(target - current) * maxDelta;
}


SamplerState linearClampSampler;
[numthreads(8, 8, 1)]
void InitializeKernel(uint3 id : SV_DispatchThreadID)
{
	float2 uv = (float2)id / gridSize;
	float4 col = heightMapRef[id.xy];

	float4 ink = inkGrid[id.xy];
	setInkSaturationLevel(ink, col.r * maxInkPerCell);
	setDryness(ink, 1);
	inkGrid[id.xy] = ink;
}

[numthreads(8, 8, 1)]
void ApplyInkKernel(uint3 id : SV_DispatchThreadID)
{
	float4 ink = inkGrid[id.xy];

	for (uint i = 0; i < brushBuffer.Length; i++)
	{
		float2 prevPos = brushBuffer[i].prevPos;
		float2 pos = brushBuffer[i].pos;

		////complete line for lower fps
		int2 delta = pos - prevPos;
		int2 deltaAbs = abs(delta);
		int steps = max(max(deltaAbs.x, deltaAbs.y), 1);

		//DDA https://www.geeksforgeeks.org/dda-line-generation-algorithm-computer-graphics/
		for (int j = 0; j < steps; j++)
		{
			int2 linePos = (int2)lerp(prevPos, pos, j / (float)steps);
			if (distance(linePos, id.xy) < brushBuffer[i].radius)
			{
				setInkLevel(ink, inkLevel(ink) + inkDrop * deltaTime);
				setDryness(ink, 0);
				break;
			}
		}
	}

	inkGrid[id.xy] = ink;
}

void CalculateInkTransfer(int2 inkCellIndex1, int2 inkCellIndex2, float inkTransferSpeed, float deltaTime, inout float inkOutcome1, inout float inkOutcome2)
{
	float4 inkCell1 = inkGrid[inkCellIndex1];
	float4 inkCell2 = inkGrid[inkCellIndex2];

	float overflowMean = (OverflowAmount(inkCell1) + OverflowAmount(inkCell2)) / 2;

	//if a cell can only transfer 1/4 of its ink, we prevent weird ass ink transfer prediction
	float overflowMeanQuarter = overflowMean / 4;

	//outcome 2 can be deducted, validate ink conservation
	float transferAmmount1 = MoveTowards(OverflowAmountQuarter(inkCell1), overflowMeanQuarter, deltaTime * inkTransferSpeed);
	float transferAmmount2 = MoveTowards(OverflowAmountQuarter(inkCell2), overflowMeanQuarter, deltaTime * inkTransferSpeed);

	inkOutcome1 = transferAmmount1 - OverflowAmountQuarter(inkCell1);
	inkOutcome2 = transferAmmount2 - OverflowAmountQuarter(inkCell2);
}

bool InBound(int2 index, int2 gridSize)
{
	return index.x >= 0 && index.x < gridSize.x && index.y >= 0 && index.y < gridSize.y;
}

[numthreads(8, 8, 1)]
void CalculateInkTransferKernel(uint3 id : SV_DispatchThreadID)
{
	float4 ink = inkGrid[id.xy];
	for (int i = 0; i < 4; i++)
	{
		int2 dir = 1;
		switch (i)
		{
		case 0: dir = int2(-1, 0); break;
		case 1: dir = int2(0, 1); break;
		case 2: dir = int2(1, 0); break;
		case 3: dir = int2(0, -1); break;
		}

		int2 nextCellIndex = ((int2)id.xy) + dir;
		if (InBound(nextCellIndex, (int2)gridSize))
		{
			float outcome1, outcome2;
			CalculateInkTransfer(id.xy, nextCellIndex, inkTransferSpeed, deltaTime, outcome1, outcome2);
			setIncomingInk(ink, incomingInk(ink) + outcome1);

			//when receiving ink, reset dryness based on amount received and dryness of received ink
			float otherWetness = 1 - dryness(inkGrid[nextCellIndex]);
			setDryness(ink, saturate(dryness(ink) - otherWetness * outcome1 * wetnessTransfer));
		}
	}

	float newDryness = dryness(ink) + drySpeed * deltaTime;
	setDryness(ink, saturate(newDryness));

	inkGrid[id.xy] = ink;
}

[numthreads(8, 8, 1)]
void ResolveInkKernel(uint3 id : SV_DispatchThreadID)
{
	float4 currentCell = inkGrid[id.xy];
	currentCell.r += incomingInk(currentCell);
	currentCell.b = 0;
	inkGrid[id.xy] = currentCell;

	float invMaxInkPerCell = 1 / maxInkPerCell;
	float v = 1 - inkLevel(currentCell) * invMaxInkPerCell;
	float4 color = float4(v, v, v, InkRatio(currentCell));
	visualGrid[id.xy] = color;
}
